import pandas as pd
import numpy as np
import matplotlib as mpl
mpl.use('TkAgg')
import matplotlib.pyplot as plt
from matplotlib.patches import Ellipse, Circle
import csv
data=[]
i = 0;
with open('data_1.csv')as f:
    f_csv = csv.reader(f)
    for row in f_csv:
        temp = float(row[0])
        x = int(i/200) * 107 / 200;
        y = (i - int(i/200)*200) * 107 / 200;
        temp_list = [x, y, temp];
        data.append(temp_list);
        i = i + 1
#color_1 = [1,5,14,15,20,31,76,85,119]
color_1 = [1,31, 32, 35, 264, 314, 494]
color = ['black', 'brown', 'red', 'yellow', 'lime', 'aqua', 'deepskyblue', 'slategrey', 'lightsalmon', 'blue', 'orange', 'lightblue', 'darkgreen']
index = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 31, 32, 32, 32, 35, 1, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 1, 32, 35, 35, 35, 1, 1, 1, 32, 32, 35, 35, 1, 32, 35, 1, 1, 32, 1, 32, 35, 1, 1, 32, 1, 1, 35, 35, 1, 35, 35, 1, 35, 35, 35, 35, 35, 35, 35, 35, 1, 32, 35, 35,
35, 35, 35, 32, 32, 35, 35, 35, 35, 35, 1, 32, 32, 32, 35, 35, 35, 32, 32, 32, 32, 35, 35, 1, 32, 35, 35, 35, 32, 32, 32, 32, 35, 35, 35, 35, 1, 35, 35, 35, 35, 1, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 35, 35, 35, 35, 35, 1, 1, 35, 35, 35, 35, 1, 1, 1, 35,
35, 35, 35, 1, 1, 35, 35, 35, 35, 1, 1, 1, 1, 1, 35, 35, 35, 35, 35, 35, 35, 35, 1, 1, 1, 1, 1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 35, 35, 1, 35, 35, 35, 35, 35, 35, 35, 35, 35, 1, 35, 35, 35, 35, 35, 264, 35, 1, 264, 35, 35, 1, 1, 264, 264, 264, 35, 35, 35, 35, 1, 1, 35, 35, 35, 35, 1, 264, 35, 35, 35, 35, 35, 1, 264, 264, 264, 35,
35, 35, 35, 35, 264, 264, 35, 35, 35, 35, 35, 35, 264, 35, 35, 35, 35, 314, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 314, 264, 35, 35, 35, 35, 314, 314, 314, 314, 1, 35, 35, 35, 314, 1, 35, 35, 314, 314, 1, 1, 35, 314, 314, 1, 1, 314, 314, 1, 1, 1, 314, 1, 1, 1, 1, 1, 1, 1, 314, 1, 1, 1, 1, 314, 1, 1, 1, 314, 314, 314, 1, 264, 264, 314, 1, 1, 1, 1, 1, 264, 314, 1, 1, 1, 264, 264, 264, 314, 264, 264, 35, 1, 264, 1, 1, 1, 264, 264, 1, 1, 264, 264, 264, 264, 1, 264, 264, 314, 314, 314, 314, 314, 314, 314, 1, 1, 264, 264, 264, 264, 264, 264, 314, 314, 314, 1, 1, 264, 264, 314, 314, 314, 314, 1, 1, 264, 314, 314, 314, 314, 314, 1, 1, 314, 314, 1, 314, 314, 1, 1, 1, 314, 264, 264, 1, 1, 1, 314, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 494, 1, 494, 494, 494, 494, 1, 494, 494, 494, 494, 494, 494, 494, 494, 494, 494];
result = [3563, 3566, 3768, 4162, 4165, 4357, 4560, 4562, 4763, 4765, 4962, 5161, 5948, 5980, 5985, 6143, 6178, 6180, 6577, 6774, 6777, 6780, 6975, 6976, 6978, 7173, 7177, 7178, 7776, 7975, 8295, 10077, 10279, 10674, 11697, 11951, 12068, 12097, 12100, 12101, 12297, 12298, 12300, 12303, 12495, 12499, 12551, 12555, 12669, 12697, 12700, 12702, 12746, 12747, 12748, 12865, 12866, 12897, 12898, 12946, 13066, 13094, 13152, 13154, 13265, 13351, 13666, 13696, 13743, 13746, 13866, 13944, 13947, 14097, 14099, 14145, 14287, 14295, 14354, 14484, 14498, 14501, 14503, 14684, 14687, 14689, 14699, 14745, 14852, 14886, 14889, 14894, 14896, 14900, 15052, 15055, 15086, 15091, 15092, 15099, 15101, 15154, 15254, 15257, 15259, 15292, 15293, 15295, 15451, 15454, 15456, 15459, 15492, 15500, 15555, 15660, 15691, 15696, 15699, 15850, 15855, 15858, 15859, 15896, 15897, 15902, 15904, 15954, 16095, 16098, 16101, 16102, 16152, 16300, 16301, 16304, 16455, 16496, 16499, 16502, 16503, 16700, 16701, 16702, 16704, 16901, 16904, 16905, 17099, 17102, 17103, 17106, 17300, 17301, 17303, 17304, 17305, 17332, 17501, 17502, 17504, 17507, 17699, 17732, 17733, 17895, 17900, 17904, 17905, 17931, 17933, 17934, 18093, 18098, 18100, 18103, 18130, 18136, 18298, 18299, 18301, 18304, 18327, 18329, 18330, 18333, 18335, 18490, 18491, 18492, 18498, 18499, 18500, 18501, 18504, 18528, 18529, 18531, 18534, 18538, 18679, 18688, 18691, 18692, 18694, 18696, 18697, 18698, 18701, 18731, 18879, 18881, 18887, 18890, 18893, 18894, 18896, 18897, 18900, 18901, 19080, 19081, 19086, 19089, 19090, 19092, 19095, 19096, 19097, 19098, 19133, 19280, 19287, 19288, 19290, 19293, 19295, 19296, 19298, 19479, 19480, 19482, 19485, 19490, 19532, 19689, 19691, 19732, 19853, 19886, 19888, 19899, 20083, 20087, 20088, 20096, 20097, 20129, 20285, 20286, 20287, 20288, 20289, 20344, 20488, 20529, 20543, 20655, 20688, 20727, 20734, 20743, 20744, 20747, 20854, 20885, 20892, 20893, 20928, 20931, 21052, 21054, 21058, 21092, 21129, 21143, 21288, 21291, 21293, 21298, 21300, 21330, 21344, 21346, 21354, 21485, 21490, 21492, 21493, 21499, 21547, 21549, 21651, 21690, 21692, 21693, 21694, 21695, 21750, 21854, 21887, 21894, 21896, 21907, 22054, 22055, 22058, 22090, 22092, 22093, 22094, 22096, 22251, 22256, 22264, 22266, 22269, 22293, 22295, 22305, 22350, 22450, 22456, 22467, 22469, 22500, 22503, 22504, 22506, 22508, 22653, 22668, 22670, 22705, 22707, 22852, 22868, 22899, 22904, 22906, 22907, 23069, 23103, 23104, 23106, 23108, 23303, 23304, 23305, 23306, 23307, 23503, 23505, 23508, 24121, 24322, 24323, 24518, 24520, 24686, 24715, 24717, 24719, 24720, 24886, 24917, 24921, 24926, 25084, 25087, 25088, 25118, 25131, 25132, 25288, 25316, 25319, 25321, 25322, 25325, 25330, 25487, 25518, 25522, 25523, 25527, 25528, 25530, 25692, 25730, 25733, 25864, 25920, 25933, 26106, 26108, 26122, 26129, 26135, 26308, 26309, 26323, 26329, 26332, 26336, 26510, 26534, 26535, 26672, 26674, 26675, 26677, 26682, 26686, 26688, 26708, 26710, 26722, 26726, 26727, 26729, 26732, 26733, 26874, 26877, 26880, 26905, 26909, 26930, 26942, 27068, 27069, 27087, 27088, 27107, 27112, 27142, 27271, 27275, 27279, 27281, 27285, 27304, 27307, 27472, 27482, 27508, 27671, 27685, 27698, 27699, 27702, 27868, 28134, 28145, 28299, 28301, 28302, 28481, 28696, 28697, 28698, 28699, 28894, 28895, 28901, 29094, 29096, 29099, 29291, 29295, 29298, 29301, 29493, 29494, 29496, 29690, 29697, 29699, 29891, 29894, 30094, 30305, 30706, 30904, 31107, 31305, 31502, 31706, 31899, 32300, 32306, 32697, 32699, 33098, 33110, 33496, 33499, 33697, 33700];

#index =[1, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1, 1, 1, 14, 15, 15, 15, 15, 1, 20, 15, 20, 14, 15, 20, 20, 1, 20, 1, 15, 31, 15, 15, 15, 20, 20, 15, 20, 15, 15, 31, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 15, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 15, 1, 20, 31, 31, 76, 15, 76, 20, 20, 14, 20, 20, 20, 85, 85, 20, 1, 85, 85, 31, 85, 1, 1, 31, 1, 1, 1, 76, 1, 76, 1, 1, 1, 76, 76, 85, 85, 76, 1, 76, 76, 76, 85, 1, 85, 85, 76, 119, 85, 85, 85, 85, 1, 76, 1, 76, 1, 1, 76, 76, 76, 76, 76, 76, 1, 76, 85, 1, 76, 1, 119, 76, 76, 76, 1];
#result = [3563, 3566, 3768, 4162, 4560, 4562, 4763, 5161, 6577, 6777, 6780, 7178, 7776, 10077, 12100, 12297, 12298, 12499, 12551, 12669, 12700, 12865, 12866, 12898, 13265, 13666, 13746, 13866, 13944, 14295, 14354, 14498, 14699, 15086, 15254, 15257, 15295, 15454, 15696, 15897, 15954, 16095, 16101, 16102, 16502, 16701, 16704, 16904, 16905, 17099, 17102, 17300, 17305, 17504, 18136, 18301, 18329, 18330, 18492, 18500, 18501, 18691, 18890, 19092, 19095, 19097, 19288, 19290, 19485, 19732, 20488, 20734, 20854, 21344, 21547, 21549, 21692, 21750, 21854, 22251, 22256, 22450, 22456, 22467, 22504, 22705, 22852, 22907, 23104, 23106, 23307, 23503, 24720, 24917, 24921, 25319, 25321, 25322, 25522, 25530, 25733, 26108, 26122, 26309, 26332, 26510, 26674, 26675, 26686, 26727, 26729, 26732, 26733, 26874, 26909, 27068, 27069, 27088, 27271, 27275, 27285, 27472, 27671, 27698, 28145, 28299, 28302, 28697, 28699, 28894, 28901, 29096, 29099, 29295, 29298, 29301, 29496, 29690, 29699, 30305, 30706, 31107, 31305, 31706, 32300, 33697];
num1 = 0;
num2 = 0;
fig = plt.figure();
for i in range(len(result)):
    x = np.arange(data[result[i]-1][0]-0.5*107/200, data[result[i]-1][0] + 0.5*107/200, 0.001);
    y1 = x - x + (data[result[i]-1][1] + 0.5*107/200);
    y2 = x - x + data[result[i]-1][1] - 0.5 * 107 / 200;
    plt.plot(x, y1, alpha = 0);
    plt.plot(x, y2, alpha = 0); 
    plt.fill_between(x, y1, y2, where=(data[result[i]-1][0] - 0.5 * 107 / 200 < x)&(x < data[result[i]-1][0]+0.5*107/200), facecolor = color[color_1.index(index[i])], interpolate=True);
plt.xticks(np.arange(0, 111, 10));
plt.yticks(np.arange(0, 111, 10));
plt.show()